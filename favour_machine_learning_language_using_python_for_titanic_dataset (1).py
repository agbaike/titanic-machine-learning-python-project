# -*- coding: utf-8 -*-
"""Favour Machine learning language using python for Titanic dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m8T9FpckmbPDrdZOofoYECTCOe9mHEes
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Load the data
file_path = '/content/titanic3 (1).xls'  # Path to the uploaded file
df = pd.read_excel(file_path)

# Print initial columns
print("Initial columns:", df.columns)

# List of columns to drop
columns_to_drop = ['name', 'ticket', 'cabin', 'boat', 'body', 'home.dest']

# Check for column existence before dropping
existing_columns_to_drop = [col for col in columns_to_drop if col in df.columns]
df.drop(columns=existing_columns_to_drop, inplace=True)

# Print columns after dropping unnecessary ones
print("Columns after dropping unnecessary ones:", df.columns)

# Fill missing values only for columns that exist
if 'age' in df.columns:
    df['age'].fillna(df['age'].median(), inplace=True)
if 'fare' in df.columns:
    df['fare'].fillna(df['fare'].median(), inplace=True)
if 'embarked' in df.columns:
    df['embarked'].fillna(df['embarked'].mode()[0], inplace=True)

# Convert categorical variables to numerical but keep original `sex` column
df = pd.get_dummies(df, columns=['embarked'], drop_first=True)
df['is_male'] = df['sex'].apply(lambda x: 1 if x == 'male' else 0)

# Print columns after transformation
print("Transformed columns:", df.columns)

# Define the feature set and target variable
X = df.drop(columns=['survived', 'sex'])  # Drop the original `sex` column
y = df['survived']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Create a dataframe with actual and predicted values
results = X_test.copy()
results['Actual'] = y_test
results['Predicted'] = y_pred

# Save to CSV
results.to_csv('/content/titanic_predictions.csv', index=False)

# Print accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy}")

from google.colab import files
files.download('/content/titanic_predictions.csv')